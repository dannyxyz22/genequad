#this is the new database design

= New Database Design =

{{{
create table gene_info (
 taxID integer,
geneID integer,
symbol varchar(25),
locusTag varchar(25),
synonyms varchar(25),
dbXrefs varchar(25),
chromosome varchar(25),
mapLocation varchar(25),
description text,
typeofGene varchar(25),
symbolAuthority varchar(25),
fullNameAuthority varchar(25),
nomenclatureStatus varchar(25),
otherDesignations varchar(50),
date integer,
Primary Key(geneID)
);

create table pubMed (
pmID integer,
pubDate varchar(20),
source text,
numAuthors integer,
title text,
issn varchar (28),
Primary Key (pmID)
);

create table generif (
id integer,
taxID integer,
geneID integer,
pmID integer,
updateDay varchar(20),
updateHour varchar(8),
description text,
Primary Key (pmID,id),
Foreign Key (geneID) references geneInfo(geneID),
Foreign Key (pmID) references pubMed(pmID)
);



create table hotGenes (
geneID integer,
year integer,
grCount integer,
Primary Key (geneID,year),
Foreign Key (geneID) references geneInfo(geneID)
);

create table risingStars (
geneID integer,
year integer,
percChange double,
Primary Key (geneID,year),
Foreign Key (geneID) references geneInfo(geneID)
);

}}}


= Why change the design? =

For table gene_info, the new design will be this.

create table gene_info (
 taxID integer,
geneID integer,
symbol varchar(25),
locusTag varchar(25),
synonyms varchar(25),
dbXrefs varchar(25),
chromosome varchar(25),
mapLocation varchar(25),
description text,
typeofGene varchar(25),
symbolAuthority varchar(25),
fullNameAuthority varchar(25),
nomenclatureStatus varchar(25),
otherDesignations varchar(50),
date integer,
Primary Key(geneID)
);

The key change here is that there's no more id field (no needs for that, since geneID is already unique) as well as indexing geneID as the primary key.
As this table is really big, I think this will be one of the highest tunning changes.
I had really not noticed how bad was last design (sorry for forgetting to pay attention to this point).

pubMed will stay pretty much the same:

create table pubMed (
pmID integer,
pubDate varchar(20),
source text,
numAuthors integer,
title text,
issn varchar (28),
Primary Key (pmID)
);

Now, about generif... well, it really needs one id field, and I was indexing this id field...
As there were lots of join queries with pubMed, this was really bad for performance, since the field to make the join was not indexed.
I think the best choice here is to keep with the id unique key, but make the index as a composition of pmID and id. This way, pmID is indexed and join performance will speed up a lot.

create table generif (
id integer,
taxID integer,
geneID integer,
pmID integer,
updateDay varchar(20),
updateHour varchar(8),
description text,
Primary Key (pmID,id),
Foreign Key (geneID) references geneInfo(geneID),
Foreign Key (pmID) references pubMed(pmID)
);

I've also added some foreign keys. This will probably be better.
Another point I was paying attention is that, after all the programs have run, the results are pretty much static. So, there's no great needs for running complicated queries.
As we are also going to need the results in AJAX pages, the retrieving time must be very low.
This way, a good option is to store the results in two tables (hotGenes and risingStars). Now we can simply query and order the results based on the count (hotGenes) and percChange (risingStars).


create table hotGenes (
geneID integer,
year integer,
grCount integer,
Primary Key (geneID,year),
Foreign Key (geneID) references geneInfo(geneID)
);

create table risingStars (
geneID integer,
year integer,
percChange double,
Primary Key (geneID,year),
Foreign Key (geneID) references geneInfo(geneID)
);
