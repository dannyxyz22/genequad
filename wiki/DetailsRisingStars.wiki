#summary this page details how to find out which genes had a significant change in rank along the years

= Introduction =

A key information that may be retrieved from imported databases is which genes have had some importance increase along the last years. After testing several ways to detect these genes, a simple approach was made, based on the percentage of geneRIFs that were published about each gene, according to the related pubMed article.

== Why using percentage change? ==

Suppose in 2005 there were 1000 articles and in 2006, 1500 ones.
Suppose gene A had 100 articles in 2005 and 150 articles in 2006.
Suppose gene B had 100 articles in 2005 and 100 articles in 2006.
Suppose gene C had 100 articles in 2005 and 300 articles in 2006.
Suppose gene D had 1 article in 2005 and 2 articles in 2006.
Suppose gene E had 0 articles in 2005 and 1 article in 2006.
Suppose gene F had 400 articles in 2005 and 610 articles in 2006.

It illustrates main problems:

Gene A is about a gene that almost doesn't change along the years. In 2005 it represented 10% of the articles, so in 2006. So, the percentage change for gene A is : 0%. (not much of a rising star, although the number of articles published has increased... but so did the othes).

Gene B describes a gene that in spite of having the same number of articles from one year to another, had a negative percentage:
B(2005) = 10%, B(2006) = 6,66%, absolute percentage change = -3,33% . (it's OK! B is less interesting in 2006, since every gene had a 50% increase in publications, but not B).

Gene C: C(2005)=10%, C(2006) = 20%. Perc. change = +10.0% (C is surely more interesting in 2006).

Gene D and E show problems that happen when using only ranks.

Gene D: D(2005)=0.1%, D(2006) = 0.13%. Perc. change = +0.03% (D has twice the number of articles in 2006, it is not much important).
The same happens to E:
Gene E: E(2005) =0%, E(2006) = 0.06%. Perc. change = +0.06% (E has appeared out of zero, but it is still only 1 article).

Gene F: F(2005) = 40%, F(2006) = 40.6%. Perc. change = +0.6% (F had 210 more articles in 2006, but it's not a big change for F, it's been the first for some time. C is surely more of a rising star than F). 

Although this approach solves most of the problems of using difference in ranking along the years, small differences for genes that have a big percentage may still obfuscate less publicated genes. But this situation happens for only a few genes, causing almost no problems to this approach.

= Procedures =

Firstly, geneRIF (ImportingGenerif) and pubMed (ImportingPubMed) databases were imported to the same _gene.db_ file. One might notice that each geneRIF points to a pubMed article that describes the geneRIF in more detail. The publication date of this article was used to retrieve information on which year the geneRIF was being studied. This way, the number of geneRIFs about each gene were counted, classified by year. 

In order to get the number of geneRIFs, by year, the following SQL query was used:

{{{
select geneID, count(*) as number from generif,pubmed where taxID=9606 and generif.pmID = pubmed.pmID and pubDate like '2006%' group by geneID order by number DESC;
}}}

This query obtains the counts for the year 2006. The output of this query looks like this:

{{{
(geneID | number of generifs for that year):
7157|290
192343|192
7124|136
7422|128
1956|117
7040|109
5743|108
4790|86
3569|83
1029|79
2099|77
4318|75
3091|74
207|70
351|70
5468|67
5243|64
348|63
3586|63
4137|63
...
}}}

This query was run for years 2002 until 2007. A different query:
{{{
select geneID, count(*) as number from generif,pubmed where taxID=9606 and generif.pmID = pubmed.pmID group by geneID order by number DESC;
}}}
was run to get all time information. The result of these queries was redirected to files 2002.txt, 2003.txt, 2004.txt, 2005.txt, 2006.txt, 2007.txt and all time's result was redirected to 2008.txt, in order to make it easier. 

After the counts were obtained, another file, genes.txt, was generated. It only had the geneIDs of all genes in the database. It was generated with a simple query like:

{{{
sqlite> select distinct(geneID) from generif order by geneID;
}}}

After that, the program [http://genequad.googlecode.com/svn/wiki/nclassifier.cpp nclassifier.cpp] was created in order to rank genes, as well as calculate genes percentages and order genes according to certain parameters. The code looks like this:
{{{
#include <vector>
#include <string>
#include <fstream>
#include <iostream>
#include <stdio.h>
#include <map>
#include <cmath>
#define YEARS 7 //2002,2003,2004,2005,2006,2007,ALL(2008)

using namespace std;
//gene class to make sorting easier
class gene{
public:
  int geneID;
  int rank[YEARS];
  double myShifts[YEARS-2];//2002 and ALL don't count
  int articles[YEARS];  
  double perc[YEARS];
};

map<int,gene> genes;

//load genes
void loadGenes(){
  ifstream in("genes.txt");
  int id;
  string temp;
  while(getline(in,temp)){
    sscanf(temp.c_str(),"%d",&id);
    gene myGene;
    myGene.geneID=id;
    for(int i=0;i<YEARS;i++){
      myGene.rank[i]=-1;
      myGene.articles[i]=0;
    }
    genes[id]=myGene;
  }
}

void calcPerc(){
  FILE* in;
  for(int i=0;i<YEARS;i++){
    char temp[200];
    sprintf(temp,"200%c.txt",'2'+i);
    in = fopen(temp,"r");
    int geneID,articles;
    int myRank=1;
    int first=1;
    int lastArticle=-1;
    int skip=0;
    int totalArticles=0;
    while(  fscanf(in,"%d|%d",&geneID,&articles)!=EOF){      
      //useful for percentage calc
      genes[geneID].articles[i]=articles;
      totalArticles+=articles;
      
      //useful for ranking according to articles
      //it ranks using 1224 instead of 1223
      //which means
      // A = 10
      // B = 8
      // C = 8
      // D = 5
      // A will be first, B and C second
      // and D will be fourth
      if(first){
	first=0;
	lastArticle=articles;
      }
      if(lastArticle==articles){
	genes[geneID].rank[i]=myRank;
	skip++;
      }
      else{
	myRank+=skip;
	skip=1;
	genes[geneID].rank[i]=myRank;
      }
      lastArticle=articles;          
    }
    //now rank the last ones 
    //and calculate the percentage
    myRank+=skip;
    for(map<int,gene>::iterator it=genes.begin();it!=genes.end();it++){
      (*it).second.perc[i]= 100*(*it).second.articles[i]/(double)totalArticles;
      if( (*it).second.rank[i]==-1){
	(*it).second.rank[i]=myRank;
      }
    }
  }
}
void calcShifts(){
  for(map<int,gene>::iterator it=genes.begin();it!=genes.end();it++){
    for(int i=0;i<YEARS-2;i++){ //all doesn't count as well as 2002
      (*it).second.myShifts[i] = (*it).second.perc[i+1] -(*it).second.perc[i];
    }
  }    
}

int year;

bool compare(gene g1, gene g2){
  if ( fabs(g1.myShifts[year]- g2.myShifts[year]) > 0.000000001)
    return (g1.myShifts[year] > g2.myShifts[year]);
  else
    return (g1.geneID < g2.geneID);
  
}
void geneSort(){
  vector<gene> myGenes;
  FILE* out;
  
  for(map<int,gene>::iterator it=genes.begin();it!=genes.end();it++){
    myGenes.push_back( (*it).second);
  }    
  for(int j=0;j<YEARS-2;j++){
    year = j;
    char myFile[200];
    sprintf(myFile,"star200%c.txt",'3'+j);
    out = fopen(myFile,"w");
    sort(myGenes.begin(),myGenes.end(),compare);   
    fprintf(out,"||*GeneID* || *Percentage shift(\%)* || *Rank in %d* || *Rank in %d* || *GeneRIFs in %d* || *GeneRIFs in %d* ||\n", 2002+j,2002+j+1,2002+j,2002+j+1);
    for(int i=0;i<myGenes.size();i++){
      fprintf(out,"||%6d||%+5.2lf||%5d||%5d||%5d||%5d||\n",myGenes[i].geneID,myGenes[i].myShifts[j], myGenes[i].rank[j],myGenes[i].rank[j+1],
	      myGenes[i].articles[j],myGenes[i].articles[j+1]);
    }
  }
}


int main(){
  loadGenes();
  calcPerc();
  calcShifts();
  geneSort();
  printf("GeneID\t2002\t2003\t2004\t2005\t2006\t2007\tall\t02->03\t03->04\t04->05\t05->06\t06->07\n");
  for(map<int,gene>::iterator it=genes.begin();it!=genes.end();it++){
    printf("%d\t",(*it).first);
    for(int i=0;i<YEARS;i++){
      printf("%5.2lf\t",(*it).second.perc[i]);
    }
    for(int i=0;i<YEARS-2;i++){
      printf("%+5.2lf\t",(*it).second.myShifts[i]);
    }
    printf("\n");
  }
}

}}}
Nclassifier works like this. Firstly, geneIDs are loaded through genes.txt and loadGenes() function. After that, rank and percentage are counted through calcPerc() for each year. Then changes from one year to the following are calculated with the function calcShifts(). Finally,  genes are sorted and printed to files through geneSort(). The sorting function puts genes with highest changes on the top. 

Running the program takes a couple seconds, but then, in order to generate RisingStars, descriptions of each gene were looked up in gene_info database (CoverageTests). In order to accomplish this, [http://genequad.googlecode.com/svn/wiki/rising_get.cpp rising_get.cpp] was created. It is compiled as:
{{{
g++ rising_get.cpp -lsqlite3 -o rising_get
}}}
and was run redirecting each of the star200X.txt to standard input, for instance:
{{{
./rising_get < star2006.txt
}}}
and the output was already formated for google code wiki.
After that the sorting function was inverted and then results showed ShowStoppers.